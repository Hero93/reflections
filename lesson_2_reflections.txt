What happens when you initialize a repository? Why do you need to do it?

    An hidden git folder is created. Since the first time I don't have commited any file 
    in the repository, if I run 'git status' I only see one commit called 
    'initial commit' which doesn't track any file.
    I need to do 'git init' because then the hidden git folder will track the history of
    all the files inside the directory.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

    The working directory contains all the project files. They might be a lot, so you
    don't want to commit all of it.
    The staging area lets you choose only the files that for you, make sense together 
    for the commit you are going to make. 

How can you use the staging area to make sure you have one commit per logical change?

	By adding a file one at a time, you have more control on the things to commit that
	have a logical correlation.

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

    When you want to add a new feature but you need to keep the current version fully working
    in case you would need to fix something for production.  

How do the diagrams help you visualize the branch structure?

    Draw a diagram helps you visualize the brach structure because it allows you to view the
    commit history as a big picture. With this visualization you can, for example, easily 
    spot commits that aren't accessible within the current branches and fix the problem.

What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?

    The result is a repository with code merged between the 2 branches. We represent a 
    diagram because we need to know the commits that were added with the new branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    Automatic merging:
    PRO: you don't have to worry about anything releted to git errors.
    CONS: Git doesn't know your code well, so it might e.g merge 2 function together
          and get the file uncompiling.

    Manual merging:
    PRO: you have the control on the merging progress. You know your code better than GIT, so
         it is easy for you to fix some merge problems.
    CONS: I don't think there big cons.

